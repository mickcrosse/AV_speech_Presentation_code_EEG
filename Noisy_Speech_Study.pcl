#Randomise trial order
int num_trials = 45;
array <int> cond_order[3];
array <int> trial_order[num_trials];
loop 
	int i = 1 
until 
	i > 15 
begin
	cond_order[1] = i;
	cond_order[2] = i+15;
	cond_order[3] = i+30;
	cond_order.shuffle();
	trial_order[i] = cond_order[1];
	trial_order[i+15] = cond_order[2];
	trial_order[i+30] = cond_order[3];
	i = i + 1;
end;

#Adjust target order
int offset = 0;
array <int> target_order[num_trials];
loop 
	int i = 1 
until 
	i > num_trials 
begin
	if trial_order[i] + offset <= num_trials then
		target_order[i] = trial_order[i] + offset;
	else
		target_order[i] = trial_order[i] + offset - num_trials;
	end;
	i = i + 1;
end;

#Output trial order
output_file out1 = new output_file; 
out1.open( logfile.subject() + "-trial_order.txt" ); 
out1.print( "Run\tTrial\tTarget\n" );
loop 
	int i = 1 
until 
	i > num_trials 
begin
	out1.print( string(i) + "\t" + string(trial_order[i]) + "\t" + string(target_order[i]) + "\n" ); 
	i = i + 1;
end;
out1.close();

#Generate array of stimuli names
array <string> start_pics[num_trials];
array <string> videos[num_trials];
array <string> end_pics[num_trials];
loop 
	int i = 1 
until 
	i > num_trials 
begin
	if i >= 1  && i <= 15 then
		start_pics[i] = "crosshair.png";
		videos[i] = "obama_a_" + string(i) + ".avi";
		end_pics[i] = "crosshair.png";
	elseif i >= 16  && i <= 30 then
		start_pics[i] = "obama_start_" + string(i-15) + ".png";
		videos[i] = "obama_v_" + string(i-15) + ".avi";
		end_pics[i] = "obama_end_" + string(i-15) + ".png";
	elseif i >= 31  && i <= 45 then
		start_pics[i] = "obama_start_" + string(i-30) + ".png";
		videos[i] = "obama_av_" + string(i-30) + ".avi";
		end_pics[i] = "obama_end_" + string(i-30) + ".png";
	end;
	i = i + 1;
end;

#Output subjects score
output_file out2 = new output_file;
out2.open( logfile.subject() + "-behav_score.txt" ); 
out2.print( "Run\tTrial\tTarget\tHits\tTargets\tScore\n" );

#Define mouse variables
int answer;
mouse mse = response_manager.get_mouse( 1 );

#Define button locations

int num_locations = 12;
array<int> location[num_locations][4];	
location[1] = { 45, 67, 186, 204 };
location[2] = { 45, 67, 126, 144 };
location[3] = { 45, 67, 66, 85 };
location[4] = { 45, 67,  6, 24 };
location[5] = { 45, 67, -54, -36 };
location[6] = { 45, 67, -114, -96 };
location[7] = { 45, 67, -174, -156 };
location[8] = { 45, 67, -234, -216 };
location[9] = { 45, 67, -294, -276 };
location[10] = { 45, 67, -354, -336 };
location[11] = { 45, 67, -414, -396 };
location[12] = { 325, 590, -485, -425 };

#Define trial variables
int run;
int current_time;

#Define target variables
int target;
int num_targets;
int total_targets = 0;
int max_targets = 3;
array <int> target_times[max_targets];
string target_word;

#Define response variables
int hits;
int total_hits = 0;
int response_count;
int response_time;

#Loop through all 45 trials
loop 
	int i = 1
until 
	i > num_trials 
begin
	
	#Define trial and target index
	run = trial_order[i];
	target = target_order[i];
		
	#Load target time-stamps in array
   input_file in = new input_file; 
	in.open( "C://Users//TCDUSER//Documents//Experiments//Noisy Speech Study//EEG//Targets//target_" + string(target) + ".txt" ); 
	in.set_delimiter( '\n' ); 
   loop 
		int j = 1
	until 
		j > max_targets + 2
	begin
		if j == 1 then
			target_word = in.get_string();
		elseif j == 2 then
			num_targets = in.get_int();
		else
			target_times[j-2] = in.get_int();
		end;
		j = j + 1;
   end;
	in.close(); 
	
	#Initialise pictures and videos for trial
	intro_txt.set_caption( "Trials remaining: " + string(num_trials-i+1) + "\n\nTarget word:\n" + target_word );
	intro_txt.redraw();
	default_start_pic.set_filename( start_pics[run] ); default_start_pic.load();
	vid.set_filename( videos[run] );
	stim_event.set_event_code( string(run) + "," + string(target) );
	stim_event.set_port_code( run );
	default_end_pic.set_filename( end_pics[run] ); default_end_pic.load();
	vid.prepare();
	
	#Present trials
	intro_trial.present();
	start_trial.present();
	current_time = clock.time();
	stim_trial.present();
	vid.release();
	stop_trial.present();
		
	#Define subroutine
	mse.set_xy( 0, 0 ); 
	sub
		int get_selection
	begin
		int x = mse.x();
		int y = mse.y();
		loop 
			int j = 1
		until 
			j > num_locations 
		begin
			if x >= location[j][1] && x <= location[j][2] && y >= location[j][3] && y <= location[j][4] then
				return j
			end;
			j = j + 1;
		end;
		return 0
	end;

	#Obtain intelligibility score
	loop
		bool j = false;
		int responses = response_manager.total_response_count();
	until
		j == true 
	begin
		decision_trial.present();
		score_pic.set_part_x( 26, mse.x() );
		score_pic.set_part_y( 26, mse.y() ); 
		mse.poll();
		if response_manager.total_response_count() > responses then
			responses = response_manager.total_response_count();
			int selection = get_selection();
			if selection == num_locations then
				j = true;
			elseif selection > 0 then
				answer = selection;
				loop 
					int k = 1
				until 
					k > 11 
				begin
					score_pic.set_part( k, box_unchecked );
					k = k + 1;
				end;
				score_pic.set_part( selection, box_checked );
			end;
		end;
	end;
	
	#Calculate hit rate
	response_count = response_manager.total_response_count();
	hits = 0;
	loop 
		int j = 1 
	until 
		j > num_targets
	begin
		loop 
			int k = 1 
		until 
			k > response_count
		begin
			response_time = response_manager.get_response_data(k).time() - current_time - 1000;
			if response_time > target_times[j] && response_time < target_times[j] + 2000 then
				hits = hits + 1;	
				k = response_count + 1;
			else
				k = k + 1;
			end;
		end;	
		j = j + 1;	
	end;
	total_hits = total_hits + hits;
	total_targets = total_targets + num_targets;

	#Output subjects score
	out2.print( string(i) + "\t" + string(run) + "\t" + string(target_order[i]) + "\t" + string(hits) + "\t" + string(num_targets) + "\t" + string(answer-1) + "\n" );
		
	#Present finish trial at end
	if i == num_trials then
		finish_txt.set_caption( "You are finished.\nThank you." );
		finish_txt.redraw ();
		finish_trial.present();
	end;
	
	i = i + 1;
	
end;
out2.close();